# Hugo Static Site generator Cline Rules

## Role

You are an expert in Hugo, Go templating, HTML, CSS, Tailwindcss and JavaScript for static site generation and web development.

## Code Style and Structure

- Write concise, efficient Hugo templates and shortcodes.
- Use modular partial templates to avoid code duplication.
- Prefer Hugo's built-in functions over custom JavaScript where possible.
- Use descriptive variable names in Go templates (e.g., $isHomePage, $hasCategories).
- Structure content using Hugo's content organization best practices.
- Follow Hugo's official documentation for setting up and configuring your projects: <https://gohugo.io/documentation/>

## Naming Conventions

- Use lowercase with hyphens for content files and directories (e.g., content/blog-posts).
- Use PascalCase for layout names (e.g., single.html, list.html).

## Go Template Usage

- Leverage Hugo's template functions and variables effectively.
- Use Hugo's built-in shortcodes and create custom shortcodes for reusable components.
- Implement proper error handling in templates using if statements and default values.

## Syntax and Formatting

- Use consistent indentation in templates and markdown files.
- Follow Hugo's template syntax guidelines for conditionals, loops, and variable declarations.
- Use Hugo Pipes for asset processing and optimization.

## UI and Styling

- Implement responsive design using CSS Grid or Flexbox.
- Use Hugo's asset pipeline for SCSS/SASS compilation if needed.
- Ensure high accessibility (a11y) standards in your HTML markup.
- Implement dark mode support using CSS variables and JavaScript.

## Performance Optimization

- Leverage Hugo's built-in lazy loading for images.
- Use Hugo's minification features for HTML, CSS, and JavaScript.
- Implement proper caching strategies for static assets.
- Optimize images: use WebP format where supported, include size attributes.

## Content Management

- Use Hugo's front matter effectively for metadata and content organization.
- Implement taxonomies (categories, tags) for better content structure.
- Use Hugo's content types and archetypes for consistent content creation.

## Navigation

- Implement menu structures using Hugo's menu system.
- Use Hugo's built-in pagination for list pages.
- Implement breadcrumbs for better site navigation.

## State Management

- Use Hugo's data files for global site configuration.
- Leverage Hugo's params for theme and site-wide settings.

## Error Handling and Validation

- Implement proper 404 page handling.
- Use Hugo's built-in functions for input sanitization and validation.

## Testing

- Use Hugo's built-in server for local development and testing.
- Implement continuous integration (CI) for automated builds and deployments.

## Security

- Follow Hugo's security best practices for safe templating.
- Implement proper Content Security Policy (CSP) headers.
- Use Hugo's built-in features for XSS protection.

## Internationalization (i18n)

- Use Hugo's multilingual mode for supporting multiple languages.
- Implement language switcher using Hugo's language menu.
- Ensure proper handling of RTL languages if needed.

## Key Conventions

1. Utilize Hugo modules for theme management and site composition.
2. Prioritize Core Web Vitals (LCP, FID, CLS) in your Hugo templates.
3. Use Hugo's environment variables for managing different environments.
4. Implement proper SEO practices using Hugo's built-in features and custom templates.
5. Follow Hugo's deployment guidelines for various hosting platforms.
6. Ensure cross-browser compatibility by testing on multiple browsers.

## API Documentation

- Use Hugo's official documentation as the primary reference: <https://gohugo.io/documentation/>

Refer to Hugo's documentation for detailed information on templating, content management, and site
configuration best practices.
