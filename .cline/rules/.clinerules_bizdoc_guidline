# Documents Management Guidelines

## 管理番号の決定方法

1. 部門コード: 次の3桁は部門コードを示します。部門は英大文字3文字の略称を使用して表現されます。
|AUD|FIN|LEG|HRD|GEN|ACC|PRE|ADV|SAL|PLN|DEV|QCO|LGS|ENG|PRD|MNF|RND|MAT|PCH|EXP|IMP|GLB|
|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
|監査部|財務部|法務部|人事部|総務部|経理部|広報部|広告部|営業部|企画部|開発部|品質管理部|流通部|技術部|生産部|製造部|研究開発部|資材部|購買部|輸出部|輸入部|海外事業部|

2. 文書コード: 続く3桁は文書コードを示します。文書の性質は英大文字3文字の略称で表されます。
|RPT|CON|MEM|MAN|PRS|LET|INV|POL|SRS|AGD|MIN|CAT|BRF|FAQ|FRM|GUD|NWS|PRO|SUR|BIL|PLD|EST|SCH|WIP|RES|ORD|INS|AGR|PER|TRA|NOT|APP|COM|REC|ANA|EVL|REF|JOU|TEM|POV|QUO|SUP|MKT|ADR|RFP|RFC|SOW|HRR|MOM|LGL|BRD|TRM|FEA|VIS|LOG|TUT|STR|TIC|WAR|CAS|
|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
|一般報告書|契約書|メモ|マニュアル|プレゼンテーション|手紙|招待状|ポリシー文書|要件仕様書|会議の議題|会議録|カタログ|ブリーフ|よくある質問文書|フォーム|ガイドライン|ニュースレター|提案書|調査報告|請求書|計画書|見積書|スケジュール|作業進捗報告書|リサーチ文書|注文書|指示書|同意書|評価報告書|トレーニング資料|通知書|アプリケーション文書|通信文書|受領書|分析報告書|評価報告書|参考文献|ジャーナル|テンプレート|ポリシー概要|見積もり書|サポート文書|マーケティング資料|監査報告|提案依頼書|変更依頼書|作業範囲文書|人事関連文書|会議議事録|法的文書|業務要件定義書|用語集|フィーチャー記事|訪問報告書|ログファイル|チュートリアル|戦略文書|チケット情報|保証書|ケーススタディ|

3. 識別要素の選定: 管理番号にはプロジェクト、業務、文書の種類などの識別要素が含まれます。これらの要素は短縮形で示され、アンダースコアで区切られます。例えば：
   - 部門コード: FIN
   - 文書コード: PRT
   - ファイルコード: F0001

さらに、関連するプロジェクト、フェーズ、タスクの識別要素を含めることができます。
   - プロジェクトコード: PJ01
   - フェーズ識別子: PH01
   - タスク識別子: T001

これらの要素を組み合わせて、識別要素を作成します。
   - 識別要素: FIN-PRT-F0001_PJ01-PH01-T001

## 命名規則の遵守

1. 管理対象ファイルの格納されているフォルダ名は管理番号にしてください。
2. タイムスタンプ: ファイル名には作成日や提出日などの日付情報を組み込むことができます。

   例：
      - パス: ./**/FIN-PRT-F0001/costEstimate_2023-08-28.docx

3. リビジョン: ファイルが更新された場合には、リビジョン番号などを追加して管理番号を調整できます。
   - パス: ./**/FIN-PRT-F0001/costEstimate_2023-08-28_rv2.docx


以上のガイドラインに従って、一貫性のある管理番号を付与するようお願いいたします。


## 行動指針

Agentは、分野別のドメイン知識を有するよう、各部門ごとにそれぞれ別の専門家のRoleを獲得してください。
プロジェクトを推進するため、複数のAgentがClueを結成し、得意分野ごとにタスクを分担します。
コンテキストが不足している場合、AIまたはユーザーに応答するようなタスクを設定します。


## Tips

次のコマンドを使用して、docs内の各フォルダーに1つのreadmeを必ず用意してください。
```
mkdir -p docs
pushd docs; for d in (fd . -t d); set readme "$d/readme.md"; if not test -e $readme; echo "# $d" > $readme; end; end; popd
```

次のコマンドを使用して、新しいDIRを作成するたびに各深度レベルでREADMEにTOCを再帰的に追加します。
```
fd -i 'readme' | while read -l f; set d (dirname $f); tree -fi $d -d --noreport | perl -pe 's|^(.*)/([^/]+)\n$|- ]($1/$2)\n|' >> $f; end
```


ただし


## ディレクトリ構成

一般に、プロジェクトドキュメントを必要とする場合、次の構成を組み立てます。
```
- [initialBusinessConcept](./docs/Planning/PLN-PLD-F0001/initialBusinessConcept.{md})
- [initialBusinessPlan](./docs/Planning/PLN-PLD-F0002/initialBusinessPlan.{md})
- [initialRoadmap](./docs/Planning/PLN-PLD-F0003/initialRoadmap.{md})
- [initialSchedule](./docs/Planning/PLN-PLD-F0003/initialSchedule.{md})

- [Estimation/Estimation](./reports/estimation/Estimation/Estimation.{csv,docx,md,xlsx})
- [CostTable](./reports/estimation/costTable/CostTable.{csv,md,xlsx})

- [LpConcept](./design/LpConcept.{html})

- [BusinessRequirements](./reports/BusinessRequirements/BusinessRequirements/BusinessRequirements.{docx,md})
- [FunctionsList](./reports/BusinessRequirements/FunctionsList/FunctionsList.{csv,md,xlsx})
- [NonFunctionsList](./reports/BusinessRequirements/NonFunctionsList/NonFunctionsList.{csv,md,xlsx})
- [RequirementsList](./reports/BusinessRequirements/RequirementsList/RequirementsList.{csv,md,xlsx})

- [AsisOperationFlow](./reports/RequirementDefinition/asisOperationFlow/AsisOperationFlow.{md,png})
- [BasicInfos](./reports/RequirementDefinition/basicInfos/BasicInfos.{docx,md})
- [FunctionsList](./reports/RequirementDefinition/functionsList/FunctionsList.{csv,md,xlsx})
- [NonFunctionsList](./reports/RequirementDefinition/nonFunctionsList/NonFunctionsList.{csv,md,xlsx})
- [RequirementsList](./reports/RequirementDefinition/requirementsList/RequirementsList.{csv,md,xlsx})
- [TobeOperationFlow](./reports/RequirementDefinition/tobeOperationFlow/TobeOperationFlow.{md,png})

- [SystemDesign](./reports/SystemDesign/SystemDesign/SystemDesign.{docx,md})
- [BackendHandlesList](./reports/SystemDesign/backendHandlesList/BackendHandlesList.{csv,md,xlsx})
- [CommonComponent](./reports/SystemDesign/commonComponent/CommonComponent.{csv,md,xlsx})
- [ErDiagram](./reports/SystemDesign/erDiagram/ErDiagram.{md,png})
- [ScreenTransitions](./reports/SystemDesign/screenTransition/ScreenTransitions-{1,2,3,4,5}.{md,png})
- [screenUI/ScreenUI](./reports/SystemDesign/screenUI/ScreenUI.{md})
- [ScreensList](./reports/SystemDesign/screensList/ScreensList.{csv,md,xlsx})
- [SequenceDiagrams](./reports/SystemDesign/sequenceDiagram/SequenceDiagrams-{1,2,3,4,5}.{md,png})
- [SystemAbstraction](./reports/SystemDesign/systemAbstraction/SystemAbstraction.{docx,md})
- [SystemArchitecture](./reports/SystemDesign/systemArchitecture/SystemArchitecture.{md,png})
- [TableDefinition](./reports/SystemDesign/tableDefinition/TableDefinition.{csv,md,xlsx})

- [SqlForSupabase](./SampleTableDefinition/SqlForSupabase.{txt})

- [IntegrationTest](./reports/test/IntegrationTest/IntegrationTest.{csv,xlsx})
- [SystemTest](./reports/test/SystemTest/system_test.{csv,xlsx})

- [Definition](./docs/Prompts/DEV-MEM-F0101/Definition.{md})
- [Overview](./docs/Prompts/DEV-MEM-F0102/Overview.{md})
- [Details](./docs/Prompts/DEV-MEM-F0103/Details.{md})
- [TestDesign](./docs/Prompts/DEV-MEM-F0104/TestDesign.{md})
- [TestDesignFig](./docs/Prompts/DEV-MEM-F0104/TestDesignFig.{md})
- [Coding](./docs/Prompts/DEV-MEM-F0105/Coding.{md})

- [AsisOperationFlow](./ProjectData/AsisOperationFlow.{json})
- [BackendHandlesList](./ProjectData/BackendHandlesList.{json})
- [BasicInfos](./ProjectData/BasicInfos.{json})
- [CommonComponent](./ProjectData/CommonComponent.{json})
- [ErDiagram](./ProjectData/ErDiagram.{json})
- [FunctionsList](./ProjectData/FunctionsList.{json})
- [NonFunctionsList](./ProjectData/NonFunctionsList.{json})
- [RequirementsList](./ProjectData/RequirementsList.{json})
- [ScreenTransition](./ProjectData/ScreenTransition.{json})
- [ScreenUi](./ProjectData/ScreenUi.{json})
- [ScreensList](./ProjectData/ScreensList.{json})
- [SequenceDiagram](./ProjectData/SequenceDiagram.{json})
- [SystemAbstraction](./ProjectData/SystemAbstraction.{json})
- [SystemArchitecture](./ProjectData/SystemArchitecture.{json})
- [TableDefinition](./ProjectData/TableDefinition.{json})
- [TobeOperationFlow](./ProjectData/TobeOperationFlow.{json})

- [Backlog](./ProjectOutput/Backlog.{json})
- [Roadmap](./ProjectOutput/Roadmap.{json})
- [StatusBoard](./ProjectOutput/StatusBoard.{json})

- [ProjectSeed](./tools/scripts/ProjectSeed.{sh})

- [README](./README.{md})
- [README.ja](./README.ja.{md})

```

## コーディング規約

- スネークケースは、変数とメソッド名を作成するために使用されます。Pythonでプログラミングするときに最も多く発生し、また、テーブルや列の名前の作成に使用されるため、データベースを操作するときにも使用します。大文字のバージョンは、ほとんどのプログラミング言語で定数を宣言するために使用されます。
- ケバブケースは、URLやスラグで使用します。
- キャメルケースは、変数、関数、メソッド名を作成するために、Java、JavaScript、およびTypeScriptで使用されます。
- パスカルケースは、クラスに名前を付けるために使用される使用されます。

